* debugging tools (#60): the issue online already contains interesting tips on this, look at it
* work stealing job system (see #100) + mt scheduler based on const awareness for types

EXAMPLES
* filter on runtime values/variables (not only types)
* support to polymorphic types (see #859)

DOC:
* storage<void> and storage<entity>
* custom storage/view
* examples (and credits) from @alanjfs :)
* update entity doc when the storage based model is in place
* in-place O(1) release/destroy for non-orphaned entities, out-of-sync model

TODO (high prio):
* check natvis files (periodically :)
* remove the static storage from the const assure in the registry
* pop_if to improve further destroying entities (drastically)
* doc: exclude only views, storage entity (and diff between iterator and each based iteration), bump entities, signals on entity creation/destruction
* registry: replace destroy with a drop-all method that doesn't care about validity
* registry: review assign mechanism, maybe it's worth to drop it

WIP:
* get rid of observers, storage based views made them pointless - document alternatives
* exploit the tombstone mechanism to allow enabling/disabling entities (see bump, compact and clear for further details)
* basic_storage::bind for cross-registry setups (see and remove todo from entity_copy.cpp)
* process scheduler: reviews, use free lists internally
* add test for maximum number of entities reached
* deprecate non-owning groups in favor of owning views and view packs, introduce lazy owning views
